package uk.gov.hmcts.reform.dev.models;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.Id;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Column;
import jakarta.persistence.Enumerated;
import jakarta.persistence.EnumType;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;

/**
 * Entity - a task in the HMCTS case management system.
 * This class maps to the 'tasks' table in the database and contains
 * all the information needed to track caseworker tasks including
 * title, description, status, and due dates.
 */
@Entity
@Table(name = "tasks")
@NoArgsConstructor 
@AllArgsConstructor 
@Getter 
@Setter 
public class Task {

    /**
     * Unique identifier for the task.
     * Auto-generated by the database using IDENTITY strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * The task title - required field.
     * Nullable - Cannot be empty in the database
     */
    @NotBlank(message = "Title is required")
    @Column(name = "title", nullable = false, length = 255)
    private String title;
    
    /**
     * Description - Optional 
     * Can be null or empty.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;
    
    /**
     * Current status of the task.
     * Must be one of the values defined in TaskStatus enum.
     */
    @NotNull(message = "Status is required")
    @Enumerated(EnumType.STRING) // Stores enum as "TODO", "IN_PROGRESS", "COMPLETED" instead of 0,1,2
    @Column(name = "status", nullable = false)
    private TaskStatus status;
    
    /**
     * The deadline for when this task should be completed.
     */
    @NotNull(message = "Due date is required")
    @Column(name = "due_date_time", nullable = false)
    private LocalDateTime dueDateTime;
    
    /**
     * Timestamp when the task was first created.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    
    /**
     * Timestamp when the task was last modified.
     */
    @Column(name = "updated_at", nullable = false) 
    private LocalDateTime updatedAt;
    
    /**
     * Sets the creation and update timestamps to current time.
     */
    @PrePersist // Runs automatically before saving a new record.
    protected void onCreate() {
        LocalDateTime now = LocalDateTime.now();
        createdAt = now;
        updatedAt = now;
    }
    
    /**
     * JPA lifecycle callback - executed before the entity is updated.
     * Updates the modification timestamp to current time.
     * This ensures we track when tasks were last changed.
     */
    @PreUpdate // Runs automatically before updating a record.
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}